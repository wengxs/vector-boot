package ${packageName}.controller;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.vector.common.core.query.Pageable;
import com.vector.common.core.result.PageResult;
import com.vector.common.core.result.R;
import ${packageName}.pojo.dto.${ClassName}DTO;
import ${packageName}.pojo.entity.${ClassName};
import ${packageName}.pojo.query.${ClassName}Query;
import ${packageName}.pojo.vo.${ClassName}VO;
import ${packageName}.service.${ClassName}Service;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * ${tableComment} Controller
 * @author ${author}
 * @date ${date}
 */
@RestController
@RequestMapping("/${moduleName}/${bizName}")
public class ${ClassName}Controller {

    @Autowired
    private ${ClassName}Service ${className}Service;

    @GetMapping("/list")
    @PreAuthorize("@ss.hasAuthority('${permissionPrefix}query')")
    public R<PageResult> list(${ClassName}Query query) {
        IPage<${ClassName}VO> page = ${className}Service.pageVO(Pageable.getPage(query), query);
###foreach ($tableField in $tableFields)
###if($tableField.isQuery)
###set($javaField = ${tableField.javaField.substring(0,1).toUpperCase()} + ${tableField.javaField.substring(1)})
###if($tableField.javaType == "String")
###if($tableField.queryType == "LIKE")
##                .like(StringUtils.isNotBlank(query.get${javaField}()), ${ClassName}::get${javaField}, query.get${javaField}())
###else
##                .eq(StringUtils.isNotBlank(query.get${javaField}()), ${ClassName}::get${javaField}, query.get${javaField}())
###end
###else
##                .eq(query.get${javaField}() != null, ${ClassName}::get${javaField}, query.get${javaField}())
###end
###end
###end
##        );
        return R.page(page.getRecords(), page.getTotal());
    }

    @GetMapping("/{id}")
    @PreAuthorize("@ss.hasAuthority('${permissionPrefix}query')")
    public R<${ClassName}VO> get(@PathVariable ${pkJavaType} id) {
        return R.ok(${className}Service.getVOById(id));
    }

    @PostMapping
    @PreAuthorize("@ss.hasAuthority('${permissionPrefix}add')")
    public R<?> add(@RequestBody ${ClassName}DTO ${bizName}DTO) {
        ${ClassName} ${className} = new ${ClassName}();
        BeanUtils.copyProperties(${bizName}DTO, ${className});
        ${className}Service.save(${className});
        return R.ok();
    }

    @PutMapping
    @PreAuthorize("@ss.hasAuthority('${permissionPrefix}edit')")
    public R<?> update(@RequestBody ${ClassName}DTO ${bizName}DTO) {
        ${ClassName} ${className} = new ${ClassName}();
        BeanUtils.copyProperties(${bizName}DTO, ${className});
        ${className}Service.updateById(${className});
        return R.ok();
    }

    @DeleteMapping("/{ids}")
    @PreAuthorize("@ss.hasAuthority('${permissionPrefix}del')")
    public R<?> delete(@PathVariable List<${pkJavaType}> ids) {
        ${className}Service.removeByIds(ids);
        return R.ok();
    }
}
